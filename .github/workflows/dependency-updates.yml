name: 🔄 Dependency Updates

on:
  schedule:
    # Weekly dependency updates on Mondays at 08:00 UTC
    - cron: '0 8 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - all

env:
  NODE_VERSION: '18'

jobs:
  # ═══════════════════════════════════════════════════════════════
  # 📊 DEPENDENCY ANALYSIS
  # ═══════════════════════════════════════════════════════════════

  analyze-dependencies:
    name: 📊 Dependency Analysis
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check-updates.outputs.has-updates }}
      security-updates: ${{ steps.check-security.outputs.count }}
      update-summary: ${{ steps.generate-summary.outputs.summary }}

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install Dependencies
        run: npm ci

      - name: 🔍 Check for Updates
        id: check-updates
        run: |
          echo "Checking for available updates..."

          # Use our custom dependency manager
          UPDATE_RESULT=$(npm run deps:check)
          echo "$UPDATE_RESULT"

          # Check if updates are available
          if echo "$UPDATE_RESULT" | grep -q "Updates available"; then
            echo "has-updates=true" >> $GITHUB_OUTPUT
          else
            echo "has-updates=false" >> $GITHUB_OUTPUT
          fi

      - name: 🛡️ Security Audit
        id: check-security
        run: |
          AUDIT_RESULT=$(npm audit --json || true)
          VULNERABILITY_COUNT=$(echo "$AUDIT_RESULT" | jq -r '.metadata.vulnerabilities.total // 0')
          echo "count=$VULNERABILITY_COUNT" >> $GITHUB_OUTPUT

          if [ "$VULNERABILITY_COUNT" -gt 0 ]; then
            echo "🚨 Found $VULNERABILITY_COUNT security vulnerabilities"
          else
            echo "✅ No security vulnerabilities found"
          fi

      - name: 📋 Generate Update Summary
        id: generate-summary
        run: |
          echo "Generating dependency update summary..."

          SUMMARY="## 📊 Dependency Update Summary\n\n"
          SUMMARY="${SUMMARY}**Date:** $(date -u +%Y-%m-%d)\n"
          SUMMARY="${SUMMARY}**Security Issues:** ${{ steps.check-security.outputs.count }}\n"
          SUMMARY="${SUMMARY}**Update Type:** ${{ github.event.inputs.update_type || 'patch' }}\n\n"

          # Add outdated packages info
          OUTDATED=$(npm outdated --json || echo '{}')
          if [ "$OUTDATED" != "{}" ]; then
            SUMMARY="${SUMMARY}### 📦 Outdated Packages\n\n"
            echo "$OUTDATED" | jq -r 'to_entries[] | "- **\(.key)**: \(.value.current) → \(.value.latest)"' >> summary.tmp
            SUMMARY="${SUMMARY}$(cat summary.tmp)\n\n"
          fi

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # ═══════════════════════════════════════════════════════════════
  # 🔄 AUTOMATED UPDATES
  # ═══════════════════════════════════════════════════════════════

  update-dependencies:
    name: 🔄 Update Dependencies
    runs-on: ubuntu-latest
    needs: analyze-dependencies
    if: needs.analyze-dependencies.outputs.has-updates == 'true' || needs.analyze-dependencies.outputs.security-updates != '0'

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install Dependencies
        run: npm ci

      - name: 🔄 Perform Updates
        run: |
          echo "Performing dependency updates..."

          UPDATE_TYPE="${{ github.event.inputs.update_type || 'patch' }}"

          case $UPDATE_TYPE in
            "security")
              echo "Applying security updates only..."
              npm audit fix --force
              ;;
            "patch")
              echo "Applying patch updates..."
              npm update --save --save-exact
              ;;
            "minor")
              echo "Applying minor updates..."
              npx npm-check-updates -u --target minor
              npm install
              ;;
            "major")
              echo "⚠️ Applying major updates (proceed with caution)..."
              npx npm-check-updates -u
              npm install
              ;;
            "all")
              echo "Applying all available updates..."
              npm audit fix --force
              npx npm-check-updates -u
              npm install
              ;;
          esac

      - name: 🧪 Run Tests After Updates
        run: |
          echo "Running tests to verify updates..."
          npm run build
          npm test
          npm run test:memory

      - name: 📊 Generate Update Report
        run: |
          echo "Generating detailed update report..."

          # Create comprehensive update report
          cat > update-report.md << EOF
          # 📊 Dependency Update Report

          **Date:** $(date -u +%Y-%m-%d)
          **Update Type:** ${{ github.event.inputs.update_type || 'patch' }}
          **Trigger:** ${{ github.event_name }}

          ## 📈 Summary

          ${{ needs.analyze-dependencies.outputs.update-summary }}

          ## 🧪 Test Results

          ✅ **Build:** Successful
          ✅ **Unit Tests:** Passed
          ✅ **Memory Tests:** Passed

          ## 📋 Changed Files

          \`\`\`
          $(git diff --name-only)
          \`\`\`

          ## 🔍 Package Changes

          \`\`\`json
          $(git diff package.json || echo "No package.json changes")
          \`\`\`

          ---

          *Automatically generated by GitHub Actions*
          EOF

      - name: 💾 Commit Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action [Dependencies]"

          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "🔄 chore(deps): automated dependency updates

            - Update type: ${{ github.event.inputs.update_type || 'patch' }}
            - Security fixes: ${{ needs.analyze-dependencies.outputs.security-updates }}
            - Trigger: ${{ github.event_name }}

            All tests passing ✅"

            git push origin main
            echo "Changes committed and pushed successfully"
          else
            echo "No changes to commit"
          fi

      - name: 📤 Create Pull Request
        uses: peter-evans/create-pull-request@v5
        if: github.event_name == 'schedule'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🔄 chore(deps): automated dependency updates

            - Update type: ${{ github.event.inputs.update_type || 'patch' }}
            - Security fixes: ${{ needs.analyze-dependencies.outputs.security-updates }}
          title: '🔄 Automated Dependency Updates'
          body-path: update-report.md
          branch: deps/auto-update-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            security

  # ═══════════════════════════════════════════════════════════════
  # 🚨 SECURITY MONITORING
  # ═══════════════════════════════════════════════════════════════

  security-monitoring:
    name: 🚨 Security Monitoring
    runs-on: ubuntu-latest
    needs: analyze-dependencies
    if: needs.analyze-dependencies.outputs.security-updates != '0'

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install Dependencies
        run: npm ci

      - name: 🔍 Detailed Security Analysis
        run: |
          echo "Performing detailed security analysis..."

          # Generate detailed security report
          npm audit --json > security-report.json || true

          # Parse and format security report
          cat security-report.json | jq -r '
            if .vulnerabilities then
              .vulnerabilities | to_entries[] |
              "🚨 **\(.key)**: \(.value.severity) - \(.value.title)"
            else
              "✅ No vulnerabilities found"
            end
          ' > security-summary.txt

      - name: 📧 Log Security Alert
        run: |
          echo "🚨 Security Alert - ThreadTS Universal"
          echo "Vulnerabilities Found: ${{ needs.analyze-dependencies.outputs.security-updates }}"
          echo "Repository: ${{ github.repository }}"
          echo "Action Required: Review and apply security updates immediately"

      - name: 🎫 Create Security Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const securitySummary = fs.readFileSync('security-summary.txt', 'utf8');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Security Alert: ${context.payload.repository.security_updates} vulnerabilities found`,
              body: `## 🚨 Automated Security Alert

              **Date:** ${new Date().toISOString()}
              **Vulnerabilities:** ${{ needs.analyze-dependencies.outputs.security-updates }}
              **Workflow:** ${{ github.workflow }}

              ## 📋 Vulnerability Details

              ${securitySummary}

              ## 🔧 Recommended Actions

              1. Review the vulnerabilities listed above
              2. Run \`npm audit fix\` to apply automatic fixes
              3. For manual fixes, update affected packages
              4. Run full test suite after applying fixes
              5. Monitor for additional security advisories

              ## 🔗 Resources

              - [Security Report](${context.payload.repository.html_url}/security/advisories)
              - [Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})

              ---

              *This issue was automatically created by GitHub Actions*`,
              labels: ['security', 'high-priority', 'automated']
            });

# ═══════════════════════════════════════════════════════════════
# 🎯 WORKFLOW SUMMARY
# ═══════════════════════════════════════════════════════════════

# This workflow provides:
# ✅ Weekly automated dependency scanning
# ✅ Security vulnerability monitoring
# ✅ Intelligent update categorization (patch/minor/major)
# ✅ Automated testing after updates
# ✅ Pull request creation for review
# ✅ Security team notifications
# ✅ Automated issue creation for security alerts
# ✅ Comprehensive update reporting
